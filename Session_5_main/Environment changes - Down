from sklearn.metrics import accuracy_score

# During or after training, add:
def calculate_accuracy(model, data_loader, device):
    model.eval()
    correct = 0
    total = 0
    with torch.no_grad():
        for images, labels in data_loader:
            images, labels = images.to(device), labels.to(device)
            outputs = model(images)
            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()
    
    accuracy = 100 * correct / total
    return accuracy

# After each epoch:
train_accuracy = calculate_accuracy(model, train_loader, device)
test_accuracy = calculate_accuracy(model, test_loader, device)

print(f'Training Accuracy: {train_accuracy:.2f}%')
print(f'Testing Accuracy: {test_accuracy:.2f}%')

target_accuracy = 96.0
epoch = 0
max_epochs = 10  # safeguard against infinite loops

while epoch < max_epochs:
    # ... training code ...
    
    accuracy = calculate_accuracy(model, test_loader, device)
    print(f'Epoch {epoch+1}, Accuracy: {accuracy:.2f}%')
    
    if accuracy >= target_accuracy:
        print(f'Reached target accuracy of {target_accuracy}%!')
        break
    
    epoch += 1
